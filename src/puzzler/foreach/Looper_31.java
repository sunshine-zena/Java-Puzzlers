package puzzler.foreach;

/**
 * 31、循环者的灵魂
 *
 */
public class Looper_31 {
	
	public static void main(String[] args) {

		short i = -1;

		while (i != 0) {
			i >>>= 1;	//>>>=是对应于无符号右移操作符的赋值操作符。0 被从左移入到由移位操作而空出来的位上，即使被移位的负数也是如此。
		}

	}
	
	/*
	 * 因为 i 的初始值（(short)0xffff）是非 0 的，所以循环体会被执行。
	 * 在执行移位操作时，第一步是将 i 提升为 int 类型。所有算数操作都会对 short、byte和 char 类型的操作数执行这样的提升。
	 * 这种提升是一个拓宽原始类型转换，因此没有任何信息会丢失。
	 * 这种提升执行的是符号扩展，因此所产生的 int 数值是0xffffffff。
	 * 然后，这个数值右移 1 位，但不使用符号扩展，因此产生了 int数值 0x7fffffff。
	 * 最后，这个数值被存回到 i 中。为了将 int 数值存入 short变量，Java 执行的是可怕的窄化原始类型转换，它直接将高 16 位截掉。
	 * 这样就只剩下(short)oxffff 了，我们又回到了开始处。
	 * 循环的第二次以及后续的迭代行为都是一样的，因此循环将永远不会终止。
	 * 
	 * 如果你将 i 声明为一个 short 或 byte 变量，并且初始化为任何负数，那么这种行为也会发生。
	 * 如果你声明 i 为一个 char，那么你将无法得到无限循环，因为char 是无符号的，所以发生在移位之前的拓宽原始类型转换不会执行符号扩展。

	 */
}
